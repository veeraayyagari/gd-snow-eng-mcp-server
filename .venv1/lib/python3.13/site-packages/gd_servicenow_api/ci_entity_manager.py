from gd_servicenow_api.ci_entity import CIEntity
from gd_servicenow_api.ci_relationship import CIRelationship
from gd_servicenow_api.ci_relationship_type import CIRelationshipType
import logging
from gd_servicenow_api.exceptions import InvalidServiceNowRequest
logger = logging.getLogger(__name__)


class CIEntityManager:
    @staticmethod
    def create_entity(table_name: str, record: dict, parent: CIEntity = None, relationship_type: CIRelationshipType = None) -> dict:
        try:
            created_record = CIEntity.create(table_name, record)
            logger.info(f"Entity created in {table_name}: {created_record['sys_id']}")

            if parent and relationship_type:
                child_entity = CIEntity.from_cmdb(table_name, sys_id=created_record["sys_id"])
                CIRelationship.create(parent=parent, relationship_type=relationship_type, child=child_entity)
                logger.info(f"Relationship created: {parent.sys_id} -> {relationship_type.name} -> {child_entity.sys_id}")

            return created_record
        except InvalidServiceNowRequest as e:
            logger.error(f"Failed to create entity in {table_name}: {e.response}")
            raise

    @staticmethod
    def delete_entity(table_name: str, sys_id: str) -> dict:
        try:
            entity = CIEntity.from_cmdb(table_name, sys_id=sys_id)
            if not entity:
                logger.warning(f"Entity not found in {table_name} with sys_id {sys_id}")
                return {"status": "not_found", "message": f"No entity with sys_id {sys_id}"}

            relationships = CIRelationship.search_from_cmdb(parent=entity) + CIRelationship.search_from_cmdb(child=entity)
            for rel in relationships:
                rel.delete()
                logger.info(f"Deleted relationship {rel.sys_id} involving entity {sys_id}")

            result = CIEntity.delete(table_name, sys_id)
            logger.info(f"Entity deleted from {table_name}: {sys_id}")
            return result
        except Exception as e:
            logger.error(f"Error deleting entity {sys_id} from {table_name}")
            raise

    @staticmethod
    def update_entity(table_name: str, sys_id: str, updated_fields: dict) -> dict:
        try:
            updated_record = CIEntity.update(table_name, sys_id, updated_fields)
            logger.info(f"Entity updated in {table_name}: {sys_id}")
            return updated_record
        except InvalidServiceNowRequest as e:
            logger.error(f"Failed to update entity in {table_name}: {e.response}")
            raise

    @staticmethod
    def get_entity(table_name: str, name: str = None, sys_id: str = None) -> dict:
        try:
            record = CIEntity.record_from_cmdb(table_name, name=name, sys_id=sys_id)
            if record:
                logger.info(f"Entity fetched from {table_name}: {record['sys_id']}")
            else:
                logger.warning(f"No entity found in {table_name} for {name or sys_id}")
            return record
        except InvalidServiceNowRequest as e:
            logger.error(f"Failed to retrieve entity in {table_name}: {e.response}")
            raise
